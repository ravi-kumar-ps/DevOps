cd $GIT_REPO_CHARTS_PATH
set -e;

if [  -z "$CHART_VERSION" ]; then
    #Take chart version from helm charts
    CHART_VERSION=$(helm show chart . | grep '^version:' | cut -d':' -f2 | sed 's/^ *//g')
fi;
CHART_NAME=$(helm show chart . | grep '^name:' | cut -d':' -f2 | sed 's/^ *//g')

#check if value file exists
if ! [ -f $VALUES_FILE_PATH ]; then
  echo "Error : No such file $VALUES_FILE_PATH in chart directory $GIT_REPO_CHARTS_PATH."
  exit 1
fi


echo "Chart = $CHART_NAME $CHART_VERSION"

CHECKSUM=`find . -type f -exec md5sum {} + | sed "s/ /\/space/g"`
echo $CHECKSUM > sum.txt
CHECKSUM=`sed "s/ /\/newline/g" sum.txt`
rm sum.txt

HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUSCODE:%{http_code}" -X POST "http://$FLOW_ORC_ENDPOINT/v1/project/${FLOW_PROJECT_NAME}/deploy-candidate/helm-build-context"   -H 'Accept: */*'   -H 'Accept-Encoding: gzip, deflate'   -H 'Cache-Control: no-cache'   -H 'Connection: keep-alive'   -H 'Content-Type: application/json'    -H 'cache-control: no-cache'  -H 'Authorization: Basic '$FLOW_BASIC_AUTH''   -d '{
   "chart_name" : "'${CHART_NAME}'",
   "registry_id" : '${FLOW_REGISTRY_ID}',
   "chart_version" : "'${CHART_VERSION}'",
   "checksum_info": "'${CHECKSUM}'"
}' )

HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUSCODE\:.*//g')

# extract the status
HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUSCODE://')

# example using the status
if [ ! $HTTP_STATUS -eq 200  ]; then
  echo "Error [HTTP status: $HTTP_STATUS] "
  echo "Response: $HTTP_BODY"
  exit 1
fi

#########Validate for already existing release/feature candidate with same tag#############
EXIST_ALREADY=`echo $HTTP_BODY | jq -r .exist_already`
CHECKSUM_MISMATCH=`echo $HTTP_BODY | jq -r .checksum_mismatch`
DEPLOY_CANDIDATE_ID=`echo $HTTP_BODY | jq -r .dc_id`
if [ "$EXIST_ALREADY" == "true" ]; then
  if [ "$CHECKSUM_MISMATCH" == "true" ]; then
    echo "Error: Duplicate entry, deploy candidate (id: ${DEPLOY_CANDIDATE_ID}) exist with same name/label but different content. Please upgrade chart version"
    exit 1;
  fi
  
  echo "Warning: Duplicate entry, deploy candidate exist with same name,label and content. Ignoring chart push "
  DEPLOY_CANDIDATE_ID=`echo $HTTP_BODY | jq -r .dc_id`
  produce_output DEPLOY_CANDIDATE_ID $DEPLOY_CANDIDATE_ID
  exit 0;
fi

########### fetch build context from response ###########
registryHost=`echo $HTTP_BODY | jq -r .registry_host`
username=`echo $HTTP_BODY | jq -r .username`
password=`echo $HTTP_BODY | jq -r .password`
repoName=`echo $HTTP_BODY | jq -r .repo_name`


fullChartName=$CHART_NAME-$CHART_VERSION
helm dependency update .

echo "Packaging helm chart"
helm package . --version $CHART_VERSION

echo "Pushing helm chart to jfrog..."
response=$(curl -u$username:$password --silent --write-out "HTTPSTATUS:%{http_code}" -H "X-Checksum-Sha1:$(sha1sum  $fullChartName.tgz  | awk '{print $1}')"  -T  $fullChartName.tgz  "https://$registryHost/artifactory/$repoName/$fullChartName.tgz")
echo "Response of chart push command:"
echo "$response"

status_code=`echo $response | sed -e 's/.*HTTPSTATUS://'`
if [ $status_code -ne 201 ]; then
    echo "Error occured while pushing helm chart to jfrog"
    exit 1
fi

HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X POST   "http://$FLOW_ORC_ENDPOINT/v1/project/${FLOW_PROJECT_NAME}/deploy-candidate"   -H 'Content-Type: application/json'   -H 'Postman-Token: 198df417-a133-4447-9bde-bd6ab765ce94'   -H 'cache-control: no-cache' -H 'Authorization: Basic '$FLOW_BASIC_AUTH''   -d '{
  "pipeline_run_id" : '$FLOW_BUILD_NUMBER',
  "pipeline_id" :   '$FLOW_PIPELINE_ID',
  "pipeline_name" : "'$FLOW_JOB_NAME'",
  "source_repo" : "'$REPO_NAME'",
  "source_repo_branch" : "'$BRANCH_NAME'",
  "source_commit_id" : "'$COMMIT_ID'",
  "name" :      "'$CHART_NAME'",
  "image_ref" : "",
  "project_name" :  "'$FLOW_PROJECT_NAME'",
  "version" :     1,
  "candidate_type" : "DEV",
  "artifact_type" : "chart",
  "registry_id": '$FLOW_REGISTRY_ID',
  "dc_meta" :   {
    "chart_name":  "'$CHART_NAME'",
    "chart_version":   "'$CHART_VERSION'",
    "registry_id": '$FLOW_REGISTRY_ID',
    "values_file_path" : "'$VALUES_FILE_PATH'" 
  },
  "is_deployable" : false 
}' )
# extract the body
HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

# extract the status
HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

# example using the status
if [ ! $HTTP_STATUS -eq 201  ]; then
  echo "Error [HTTP status: $HTTP_STATUS] "
  echo "Response: $HTTP_BODY"
  exit 1
fi

echo "Created Deploy candidate with ID"
echo $HTTP_BODY
echo $HTTP_RESPONSE;
DEPLOY_CANDIDATE_ID=`echo $HTTP_BODY | jq -r .`
produce_output DEPLOY_CANDIDATE_ID $DEPLOY_CANDIDATE_ID
